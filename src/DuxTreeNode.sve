import React from 'react';
import PropTypes from 'prop-types';

/**
 * Data structure:
 *
 * [
 *     {
 *         label: 'Item label' | () | <element>,
 *         key: string | number,
 *         checkable: true | false,
 *         defaultChecked: true | false,
 *         defaultExpanded: true | false,
 *         icon: 'predefined' | () | <element>,
 *         children: [] | undefined,   // empty array means lazy loading, undefined means leaf node
 *         onExpanded: (),
 *         onChecked: (),
 *         onRender: (),
 *         loadingMsg: 'Loading...',
 *     },
 *     ...
 * ]
 */

class DuxTreeNode extends React.Component {
    constructor(props) {
        super(props);

        this.state = {
            expanded: props.defaultExpanded,

            // This property contains 'full', 'partial', or 'none'
            checked: props.defaultChecked ? 'full' : 'none'
        };
    }

    expandClicked = () => {
        const newExpanded = !this.state.expanded;
        this.setState({ expanded: newExpanded });
        if (this.props.onExpanded) {
            this.props.onExpanded(this.props.key, newExpanded);
        }
    };

    render() {
        const hasChildren = this.props.children !== undefined;
        let expanderLabel = '';
        if (hasChildren) {
            if (typeof this.props.expander === 'string') {
                if (this.props.expander === 'plus') {
                    expanderLabel = this.state.expanded ? '-' : '+';
                }
            } else if (typeof this.props.expander === 'function') {
                expanderLabel = this.props.expander(this.props.key, this.state.expanded);
            }
        }

        let label = this.props.label;
        if (typeof this.props.label === 'function') {
            label = this.props.label(this.props.key);
        }

        let checkbox = '';
        if (this.props.checkable) {

        }

        return (
            <div className="duxtree-node">
                { hasChildren &&
                <span onClick={this.expandClicked} className="duxtree-disclosure">{expanderLabel}</span>
                }
                {label}
                <div className="duxtree-node-children">
                    {this.state.expanded && this.props.children}
                </div>
            </div>
        );
    }
}

DuxTreeNode.propTypes = {
    label: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.node]).isRequired,
    key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    checkable: PropTypes.bool.isRequired,
    defaultChecked: PropTypes.bool.isRequired,
    defaultExpanded: PropTypes.bool.isRequired,
    icon: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.node]),
    expander: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,
    subItems: PropTypes.array,
    onExpanded: PropTypes.func,
    onChecked: PropTypes.func,
    onRender: PropTypes.func,
    loadingMsg: PropTypes.string.isRequired,

    // This is passed from the parent - 'full', 'partial', or 'none'
    // checkState: PropTypes.string.isRequired,

    // This is supplied by the parent.  It is called when the user
    // changes the check state.
    // checkStateChanged: PropTypes.func.isRequired
};

DuxTreeNode.defaultProps = {
    key: '',
    checkable: false,
    defaultChecked: false,
    defaultExpanded: false,
    loadingMsg: 'Loading...',
    expander: 'plus'
};

export default DuxTreeNode;
